#!/usr/bin/env bash

init_nvm() {
  if $(brew list nvm >/dev/null); then
    export NVM_DIR="$HOME/.nvm"
    source "$(brew --prefix nvm)/nvm.sh"
  fi
}

# Use nvm to install latest node version
install_latest_node() {
  # Check for nvm
  if $(brew list nvm >/dev/null); then
    e_header "Installing latest Node.js version..."

    nvm install node

    [[ $? ]] && e_success "Done"
  else
    printf "\n"
    e_error "Error: nvm not found."
    printf "Aborting...\n"
    exit
  fi
}

update_npm() {
  # Check for npm
  if type_exists 'npm'; then
    e_header "Updating npm to the latest version..."

    npm install npm@latest -g
  else
    printf "\n"
    e_error "Error: npm not found."
    printf "Aborting...\n"
    exit
  fi
}

# because node version manager (nvm) sets the node path dynamically based on the
# node version you're using, when you jump around between node versions, you
# might lose access to a global package you installed in another node version.
# That's annoying, so let's use yarn to install global packages. `npx` is great
# for most things, but some things I prefer to have in the global scope so I can
# run them directly without thinking twice.
install_npm_packages() {
  # Check for npm
  if type_exists 'yarn'; then
    e_header "Installing Node.js packages..."

    # List of npm packages
    local packages="yo generator-codfish now renamer npm-check"

    # Install packages globally
    yarn global add $packages

    [[ $? ]] && e_success "Done"
  else
    printf "\n"
    e_error "Error: npm not found."
    printf "Aborting...\n"
    exit
  fi
}
