#!/usr/bin/env zsh

# Load nvm function for the script
# https://unix.stackexchange.com/questions/184508/nvm-command-not-available-in-bash-script
init_nvm() {
  if $(brew list nvm > /dev/null); then
    export NVM_DIR="$HOME/.nvm"
    source "$(brew --prefix nvm)/nvm.sh"
  fi
}

# Use nvm to install latest node version, and install latest npm version too
install_latest_node() {
  if ! type 'nvm' &> /dev/null; then
    load_nvm
  fi

  # Check for nvm
  if type 'nvm' &> /dev/null; then
    e_header "Installing latest Node.js version..."

    # https://github.com/nvm-sh/nvm#migrating-global-packages-while-installing
    nvm install --lts
    nvm use node

    [[ $? ]] && e_success "Done"
  else
    printf "\n"
    e_error "Error: nvm not found."
    printf "Aborting...\n"
    exit
  fi
}

# `npx` is great for most things, but some things I prefer to have in the global
# scope so I can run them directly without thinking twice.
install_npm_packages() {
  if ! type 'npm' &> /dev/null; then
    load_nvm
  fi

  # Check for npm
  if type 'npm' &> /dev/null; then
    e_header "Installing Node.js packages..."

    # Install packages globally
    npm install -g yo generator-codfish vercel renamer npm-check

    [[ $? ]] && e_success "Done"
  else
    printf "\n"
    e_error "Error: npm not found."
    printf "Aborting...\n"
    exit
  fi
}
