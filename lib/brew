#!/usr/bin/env bash

# Test whether a Homebrew formula is already installed
# $1 - formula name (may include options)
formula_exists() {
  if $(brew list $1 >/dev/null); then
    printf "%s already installed.\n" "$1"
    return 0
  fi

  e_warning "Missing formula: $1"
  return 1
}

# Test whether a Homebrew cask app is already installed
# $1 - app name (may include options)
app_exists() {
  if $(brew cask list $1 &>/dev/null); then
    printf "%s already installed.\n" "$1"
    return 0
  fi

  if [ -d "${HOME}/Applications/${2}.app" ]; then
    printf "%s already installed.\n" "$2"
    return 0
  fi

  if [ -d "/Applications/${2}.app" ]; then
    printf "%s already installed.\n" "$2"
    return 0
  fi

  e_warning "Missing app: $1"
  return 1
}

brew_tap() {
  if brew tap | grep $1 &> /dev/null
  then
    echo "already tapped - $1"
    false
  else
    e_header "Tapping $1"
    brew tap $1
  fi
}

run_brew() {
  # Check for Homebrew
  if type_exists 'brew'; then
    # Use the latest version of Homebrew
    e_header "Updating Homebrew..."
    brew update
    [[ $? ]] && e_success "Done"

    # Upgrade any already-installed formulae
    e_header "Updating any existing Homebrew formulae..."
    brew upgrade
    [[ $? ]] && e_success "Done"

    # update or install desired formulae
    e_header "Checking status of desired Homebrew formulae..."
    local list_formulae
    local -a missing_formulae

    # ** array items can include options for package **
    local -a desired_formulae=(
      'ack'
      'bash'
      'bash-completion'
      'cheat'
      'coreutils' # GNU core utilities (those that come with macOS are outdated)
      'git'
      'go'
      'heroku/brew/heroku'
      'mongodb'
      'mysql'
      'nginx'
      'nvm'
      'php'
      'python'
      'rbenv'
      'rsync'
      'tmux'
      'wget'
      'yarn' # use to install global node packages
    )

    for index in ${!desired_formulae[*]}
    do
      if ! formula_exists ${desired_formulae[$index]}; then
        # Store the name (and options) of every missing formula
        missing_formulae=("${missing_formulae[@]}" "${desired_formulae[$index]}")
      fi
    done

    if [[ "$missing_formulae" ]]; then
      e_header "Installing missing Homebrew formulae..."

      for index in ${!desired_formulae[*]}
      do
        brew install ${desired_formulae[$index]}
      done
    fi

    # Cleanup brew
    e_header "Cleaning brew..."
    brew cleanup -s
    [[ $? ]] && e_success "Done"
  else
    printf "\n"
    e_error "Error: Homebrew not found."
    printf "Aborting...\n"
    exit
  fi
}

run_brew_cask() {
  if type_exists 'brew'; then
    # update or install desired formulae
    e_header "Checking status of desired Homebrew casks..."

    local -a missing_apps
    # mapping of [<cask-name>]='<Applications-directory-name>'
    declare -A desired_apps=(
      [alfred]='Alfred 4'
      [appcleaner]='AppCleaner'
      [brave-browser]='Brave Browser'
      [cloudapp]='CloudApp'
      [docker]='Docker'
      [google-backup-and-sync]='Backup and Sync from Google'
      [google-chrome]='Google Chrome'
      [evernote]='Evernote'
      [iterm2]='iTerm'
      [lastpass]='LastPass'
      [postman]='Postman'
      [slack]='Slack'
      [spotify]='Spotify'
      [visual-studio-code]='Visual Studio Code'
      [zoomus]='zoom.us'
    )

    for cask in "${!desired_apps[@]}";
    do
      if ! app_exists $cask "${desired_apps[$cask]}"; then
        # Store the name (and options) of every missing app
        missing_apps=("${missing_apps[@]}" "${cask}")
      fi
    done

    if [[ "$missing_apps" ]]; then
      e_header "Installing missing macOS applications..."

      for i in "${!missing_apps[@]}"
      do
        brew cask install ${missing_apps[$i]}
      done
    fi
  else
    printf "\n"
    e_error "Error: Homebrew not found."
    printf "Aborting...\n"
    exit
  fi
}
